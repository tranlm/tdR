% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/td.R
\name{td}
\alias{td}
\title{td}
\usage{
td(query = "", ...)
}
\arguments{
\item{query}{Query string to send to Teradata.}

\item{conn}{(Optional) Connection object for Teradata.}

\item{username}{(Optional) Connection user name.}

\item{password}{(Optional) Connection password.}

\item{addr}{(Optional) String containing address of database to connect to.
By default, is \emph{jdbc:teradata://megadew.corp.apple.com/charset=utf8}.}

\item{db}{Name of database to connect to. By default, is \emph{CDM_Special}.}

\item{classPath}{The location of the JDBC drivers. By default, will use the
drivers included in the package.}
}
\value{
If no data is returned from query, then an invisible object is
returned. Otherwise, a \code{data.frame} object with all data queried will
be returned.
}
\description{
Sends queries to Teradata. This code is specifically designed
for connectivity to Teradata servers using OSX at Apple using JDBC drivers
and should be updated if connected to other sources. Can take a JDBC connection
object (\code{conn}) if provided. If no JDBC connection is provided, then
a connection is attempted using the \code{user}, and \code{password} provided.
If none is provided, then tries to locate a connection object (\code{conn})
in the global environment.

If a connection profile (e.g. username, password, etc.) is provided, then
an attempt is made to connect to Teradata. Once the query is run, the
connection is then closed. If a connection object (\code{conn}) is provided
to the function (or one is found globally), then the connection remains
open.
}
\details{
Uses the v15.10.00.33 release (12 Jan 2016) tdgssconfig.jar and
terajdbc4.jar drivers.
}
\examples{
## NOT RUN ##
## Runs a quick query based on connection profile
# td("select count(*) from ICDB_PERSON", username=<username>, password=<password>, db="GCA")

## Runs query using a separately established connection
# conn = tdConn(<username>, <password>, db="GCA")
# td("select count(*) from ICDB_PERSON", conn=conn)

## Uses same connection, but allows code to find globally
# td("select count(*) from ICDB_PERSON")

}

