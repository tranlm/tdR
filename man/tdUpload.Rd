% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tdUpload.R
\name{tdUpload}
\alias{tdUpload}
\title{tdUpload}
\usage{
tdUpload(data = NULL, table = NULL)
}
\arguments{
\item{data}{\code{link{data.frame}} containing data to upload}

\item{where}{String statement to subset table with.}

\item{...}{Optional connection settings.}
}
\value{
Returns a count of the number of rows uploaded.
}
\description{
Uploads data to Teradata tables. This code is specifically 
designed for connectivity to Teradata servers using OSX at Apple using JDBC 
drivers and should be updated if connected to other sources. Can take a JDBC 
connection object (\code{conn}) if provided. If no JDBC connection is provided, 
then a connection is attempted using the \code{user}, and \code{password} 
provided. If none is provided, then tries to locate a connection object 
(\code{conn}) in the global environment.

If a connection profile (e.g. username, password, etc.) is provided, then
an attempt is made to connect to Teradata. Once the query is run, the
connection is then closed. If a connection object (\code{conn}) is provided
to the function (or one is found globally), then the connection remains
open.

By default, numeric vectors will be uploaded as an int, while character vectors 
will be uploaded as a varchar with the longest character length. For now, if any
other \code{class} is included, an error will be thrown.
}
\seealso{
\code{\link{tdConn}} for connection, \code{\link{tdNames}} for table names,
\code{\link{td}} for general queries, \code{\link{tdCpu}} for CPU 
usage, and \code{\link{tdJoin}} for joining tables.
}

