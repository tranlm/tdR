% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tdJoin.R
\name{tdJoin}
\alias{tdJoin}
\title{tdJoin}
\usage{
tdJoin(tdfO, tdf1, tdf2, index1, index2, col1 = NULL, col2 = NULL,
  joinType = "inner", conn = NULL, ...)
}
\arguments{
\item{tdfO}{Name of resulting Teradata to output.}

\item{tdf1}{Name of first Teradata table to merge.}

\item{tdf2}{Name of second Teradata table to merge.}

\item{index1}{Name of index from first table to merge by.}

\item{index2}{Name of index from second table to merge by.}

\item{col1}{Name of columns from first table to merge.}

\item{col2}{Name of columns from second table to merge.}

\item{joinType}{Type of merge to perform. Needs to be one of following: \code{inner,
left outer, right outer, full outer}.}

\item{conn}{(Optional) Connection object for Teradata.}

\item{...}{Additional \code{tdfX} and \code{indexX} to merge, where \code{X} is the count.}

\item{username}{(Optional) Connection user name.}

\item{password}{(Optional) Connection password.}

\item{addr}{(Optional) String containing address of database to connect to.
By default, is \emph{jdbc:teradata://megadew.corp.apple.com/charset=utf8}.}

\item{db}{(Optional) Name of database to connect to. By default, is \emph{CDM_Special}.}

\item{classPath}{(Optional) The location of the JDBC drivers. By default, will use the
drivers included in the package.}
}
\value{
The code creates the data table on the Teradata server via the
\code{JDBCConnection} object. Names of each table created are returned 
as a string vector.
}
\description{
Takes two (or more) Teradata EDW tables using a JDBC connection
object via the \code{RJDBC} package and merges them together.
This code is specifically designed for connectivity to Teradata servers
using OSX at Apple using JDBC drivers and should be updated if
connected to other sources.
}
\details{
By default, the code tries to do joins starting from Table 1 going up.
So if, for example, three tables are provided for inner joins, then Table 1
and Table 2 will first be inner joined, and the resulting output will
then be inner joined with Table 3. If a left join is desired for the
three tables, then Table 2 will be left joined to Table 1 and Table 3 will
then be left joined with the resulting table.

If desired, column names for each table can be provided to merge together.
By default, the code will try to use all columns of the tables provided.
All tables will be searched for duplicate column names. If any exists,
then copies will be renamed with a suffix of \code{_copyX} where \code{X}
represents the number of copies. If an index name merging by has copies
across the tables, then only one index name is kept.

If a connection profile (e.g. username, password, etc.) is provided, then
an attempt is made to connect to Teradata. Once the query is run, the
connection is then closed. If a connection object (\code{conn}) is provided
to the function (or one is found globally), then the connection remains
open.
}
\examples{
## NOT RUN ##
## With connection pre-established, inner join on table ##
# conn = tdConn(<username>, <password>)
# tdJoin(<outputTable>, <inputTable1>, <inputTable2>, <index1>, <index2>)

## inner join on table with select columns ##
# tdJoin(<outputTable>, <inputTable1>, <inputTable2>, <index1>, <index2>, joinType="left")

## left join on table ##
# tdJoin(<outputTable>, <inputTable1>, <inputTable2>, <index1>, <index2>, joinType="left")

}
\seealso{
\code{\link{tdConn}} for connection, \code{\link{tdDisk}} for disk usage,
\code{\link{tdSpool}} for spool usage, \code{\link{tdCpu}} for CPU 
usage, and \code{\link{td}} for general queries.
}

